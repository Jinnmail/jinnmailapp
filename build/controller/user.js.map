{"version":3,"sources":["../../src/controller/user.js"],"names":["mail","UserController","data","userObj","token","Promise","resolve","reject","userModel","findOne","email","then","userData","bcrypt","compare","password","toString","err","isMatch","code","msg","equal","tokenObj","userId","jwt","sign","process","env","JWT_SECRET","expiresIn","finalOutput","catch","user","console","log","newUser","save","savedUser","email_sender","oldPassword","matched","genSalt","salt","hash","newPassword","findOneAndUpdate"],"mappings":"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","file":"user.js","sourcesContent":["import userModel from '../models/user';\r\nimport uuidv4 from 'uuid/v4';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport cred from '../config/const'\r\nimport uuidv3 from 'uuid/v3';\r\nimport * as mail from '../services/mail';\r\nimport { callbackify } from 'util';\r\n\r\nclass UserController {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n\r\n    login(data) {\r\n        let userObj;\r\n        let token;\r\n        return new Promise((resolve, reject) => {\r\n\r\n            userModel.findOne({ email: data.email })\r\n                .then((userData) => {\r\n                    if (userData) {\r\n                        userObj = userData;\r\n                        return new Promise((resolve, reject) => {\r\n                            bcrypt.compare(data.password.toString(), userData.password, (err, isMatch) => {\r\n                                if (err)\r\n                                    reject(err);\r\n                                resolve(isMatch)\r\n                            })\r\n                        })\r\n                    } else {\r\n                        reject({ code: 400, msg: 'No User found' });\r\n                    }\r\n                })\r\n                .then((equal) => {\r\n                    if (equal) {\r\n                        return true\r\n                    } else {\r\n                        reject({ code: 400, msg: 'No Password matched' });\r\n                    }\r\n                })\r\n                .then((isMatch) => {\r\n                    let tokenObj = {\r\n                        userId: userObj.userId\r\n                    };\r\n                    token = jwt.sign(tokenObj, process.env.JWT_SECRET, { expiresIn: '24h' });\r\n                    return token\r\n                })\r\n                .then((token) => {\r\n                    let finalOutput = {\r\n                        'status': 'authorized',\r\n                        'userId': userObj.userId,\r\n                        'email': userObj.email,\r\n                        'sessionToken': token,\r\n                        'expiresIn': '24h'\r\n                    };\r\n                    resolve(finalOutput);\r\n                })\r\n                .catch((err) => {\r\n                    reject({ code: 500, msg: err });\r\n                });\r\n        })\r\n    }\r\n\r\n    register(data) {\r\n        return new Promise((resolve, reject) => {\r\n            userModel.findOne({ email: data.email }).then((user) => {\r\n                console.log(user)\r\n                if (user) {\r\n                    reject({ code: 500, msg: 'err' });\r\n                } else {\r\n                    let newUser = new userModel();\r\n                    newUser.email = data.email;\r\n                    newUser.password = data.password;\r\n                    newUser.userId = uuidv4();\r\n                    newUser.save((err, savedUser) => {\r\n                        if (err) {\r\n                            reject({ code: 500, msg: err });\r\n                        } else {\r\n                            mail.email_sender([data.email]);\r\n                            resolve(savedUser);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    changePassword(data) {\r\n        return new Promise((resolve, reject) => {\r\n            userModel.findOne({ userId: data.userId }, { password: 1 }).then((userData) => {\r\n                if (userData) {\r\n                    return new Promise((resolve, reject) => {\r\n                        bcrypt.compare(data.oldPassword.toString(), userData.password, (err, isMatch) => {\r\n                            if (err)\r\n                                reject(err);\r\n                            resolve(isMatch)\r\n                        })\r\n                    })\r\n                } else {\r\n                    reject({ code: 500, msg: 'unauthorized action.' })\r\n                }\r\n            })\r\n                .then((equal) => {\r\n                    if (equal) {\r\n                        return true\r\n                    } else {\r\n                        reject({ code: 400, msg: 'No Password matched' });\r\n                    }\r\n                })\r\n                .then((matched) => {\r\n                    bcrypt.genSalt(10, (err, salt) => {\r\n                        if (err)\r\n                            reject({ code: 500, msg: 'something went wrong.' })\r\n                        bcrypt.hash(data.newPassword, salt, null, (err, hash) => {\r\n                            if (err)\r\n                                reject({ code: 500, msg: 'something went wrong.' })\r\n\r\n                            data.newPassword = hash;\r\n                            userModel.findOneAndUpdate({ userId: data.userId }, { password: data.newPassword }).then((data) => {\r\n                                resolve(null);\r\n                            }).catch((err) => {\r\n                                reject({ code: 500, msg: err });\r\n                            })\r\n                        });\r\n                    });\r\n\r\n                })\r\n                .catch((err) => {\r\n                    reject({ code: 500, msg: err });\r\n                })\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport default new UserController();"]}