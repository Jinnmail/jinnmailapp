{"version":3,"sources":["../../src/controller/user.js"],"names":["mail","SALT_WORK_FACTOR","UserController","data","userObj","token","Promise","resolve","reject","userModel","findOne","email","then","userData","verified","code","msg","bcrypt","compare","password","toString","err","isMatch","equal","tokenObj","userId","jwt","sign","process","env","JWT_SECRET","finalOutput","catch","user","console","log","newUser","verificationCode","Math","floor","random","save","savedUser","email_sender","oldPassword","matched","genSalt","salt","hash","newPassword","findOneAndUpdate","ok","async","waterfall","done","$set","resetPasswordToken","resetPasswordExpires","Date","now","obj","text","DASHBOARD_URL","forget_mail","$gt"],"mappings":"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","file":"user.js","sourcesContent":["import userModel from '../models/user';\r\nimport uuidv4 from 'uuid/v4';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport cred from '../config/const'\r\nimport uuidv3 from 'uuid/v3';\r\nimport * as mail from '../services/mail';\r\nimport { callbackify } from 'util';\r\nimport async from 'async';\r\nimport btoa from 'btoa'\r\n\r\nlet SALT_WORK_FACTOR = 10;\r\n\r\nclass UserController {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n\r\n    login(data) {\r\n        let userObj;\r\n        let token;\r\n        return new Promise((resolve, reject) => {\r\n\r\n            userModel.findOne({ email: data.email })\r\n                .then((userData) => {\r\n                    if (userData) {\r\n                        if(!userData.verified){\r\n                            reject({ code: 403, msg: 'user not verified' });\r\n                        }\r\n                        userObj = userData;\r\n                        return new Promise((resolve, reject) => {\r\n                            bcrypt.compare(data.password.toString(), userData.password, (err, isMatch) => {\r\n                                if (err)\r\n                                    reject(err);\r\n                                resolve(isMatch)                                \r\n                            })\r\n                        })\r\n                    } else {\r\n                        reject({ code: 400, msg: 'No User found' });\r\n                    }\r\n                })\r\n                .then((equal) => {\r\n                    if (equal) {\r\n                        return true\r\n                    } else {\r\n                        reject({ code: 400, msg: 'No Password matched' });\r\n                    }\r\n                })\r\n                .then((isMatch) => {\r\n                    let tokenObj = {\r\n                        userId: userObj.userId\r\n                    };\r\n                    token = jwt.sign(tokenObj, process.env.JWT_SECRET);\r\n                    return token\r\n                })\r\n                .then((token) => {\r\n                    let finalOutput = {\r\n                        'status': 'authorized',\r\n                        'userId': userObj.userId,\r\n                        'email': userObj.email,\r\n                        'sessionToken': token,\r\n                        'expiresIn': '24h'\r\n                    };\r\n                    resolve(finalOutput);\r\n                })\r\n                .catch((err) => {\r\n                    reject({ code: 500, msg: err });\r\n                });\r\n        })\r\n    }\r\n\r\n    register(data) {\r\n        return new Promise((resolve, reject) => {\r\n            userModel.findOne({ email: data.email }).then((user) => {\r\n                console.log(user)\r\n                if (user) {\r\n                    reject({ code: 500, msg: 'err' });\r\n                } else {\r\n                    let newUser = new userModel();\r\n                    newUser.email = data.email;\r\n                    newUser.password = data.password;\r\n                    newUser.userId = uuidv4();\r\n                    newUser.verificationCode = Math.floor(100000 + Math.random() * 900000);\r\n                    newUser.save((err, savedUser) => {\r\n                        if (err) {\r\n                            reject({ code: 500, msg: err });\r\n                        } else {\r\n                            mail.email_sender([data.email], newUser.verificationCode);\r\n                            resolve(savedUser);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    changePassword(data) {\r\n        return new Promise((resolve, reject) => {\r\n            userModel.findOne({ userId: data.userId }, { password: 1 }).then((userData) => {\r\n                if (userData) {\r\n                    return new Promise((resolve, reject) => {\r\n                        bcrypt.compare(data.oldPassword.toString(), userData.password, (err, isMatch) => {\r\n                            if (err)\r\n                                reject(err);\r\n                            resolve(isMatch)\r\n                        })\r\n                    })\r\n                } else {\r\n                    reject({ code: 500, msg: 'unauthorized action.' })\r\n                }\r\n            })\r\n                .then((equal) => {\r\n                    if (equal) {\r\n                        return true\r\n                    } else {\r\n                        reject({ code: 400, msg: 'No Password matched' });\r\n                    }\r\n                })\r\n                .then((matched) => {\r\n                    bcrypt.genSalt(10, (err, salt) => {\r\n                        if (err)\r\n                            reject({ code: 500, msg: 'something went wrong.' })\r\n                        bcrypt.hash(data.newPassword, salt, null, (err, hash) => {\r\n                            if (err)\r\n                                reject({ code: 500, msg: 'something went wrong.' })\r\n\r\n                            data.newPassword = hash;\r\n                            userModel.findOneAndUpdate({ userId: data.userId }, { password: data.newPassword }).then((data) => {\r\n                                resolve(null);\r\n                            }).catch((err) => {\r\n                                reject({ code: 500, msg: err });\r\n                            })\r\n                        });\r\n                    });\r\n\r\n                })\r\n                .catch((err) => {\r\n                    reject({ code: 500, msg: err });\r\n                })\r\n        })\r\n\r\n    }\r\n    codeVerification(data){\r\n        return new Promise((resolve,reject)=>{\r\n            userModel.findOne({email:data.email},{verificationCode:1}).then((code)=>{\r\n                if(data.code===code.verificationCode){\r\n                    userModel.findOneAndUpdate({email:data.email},{verified:true}).then((ok)=>{\r\n                        console.log(ok);\r\n                        resolve('ok')\r\n                    })\r\n                }else{\r\n                    reject({code:401,msg:'invalid code.'})\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    resendCode(data){\r\n        return new Promise((resolve,reject)=>{\r\n            userModel.findOne({email:data.email})\r\n                    .then((code)=>{\r\n                        mail.email_sender([data.email], code.verificationCode);\r\n                        resolve('ok');\r\n                    })\r\n                    .catch(err => {\r\n                        reject({code:401,msg:'invalid code.'})\r\n                    })\r\n        })\r\n    }\r\n\r\n    forgetPassword(data){\r\n        return new Promise((resolve,reject)=>{\r\n            async.waterfall([\r\n                function (done) {\r\n                    var token = Math.floor(Math.random() * (9999 - 1000) + 1000);\r\n                    done(null, token);                    \r\n                },\r\n                function (token, done) {\r\n                    userModel.findOne({ email: data.email }, function (err, user) {\r\n                        if (!user) {\r\n                            reject({ code: 403, 'msg': 'No account with that email address exists.' });\r\n        \r\n                        }\r\n                        userModel.findOneAndUpdate({ email: data.email }, { $set: { resetPasswordToken: token, resetPasswordExpires: Date.now() + 3600000 } }, function (err, obj) {\r\n                            done(err, token, user);\r\n                        })\r\n                      \r\n                    });\r\n                },\r\n                function (token, user, done) {   \r\n                    let text= 'You are receiving this because you (or someone else) have requested the reset of the password for your account.\\n\\n' +\r\n                        'Please click on the following link:\\n\\n' +\r\n                        '<a href='+ process.env.DASHBOARD_URL + 'forgetpassword.html?t='+btoa(token) +'&e='+btoa(data.email)+ '>click here</a>\\n\\n' +\r\n                        'If you did not request this, please ignore this email and your password will remain unchanged.\\n'\r\n                    mail.forget_mail([data.email], text)\r\n                    resolve('email is sent')\r\n                }\r\n            ], function (err) {\r\n                console.log(err)\r\n                if (err) reject({ code: 500, msg: 'something went wrong.' })\r\n            });\r\n        })\r\n    }\r\n    resetPasswordChange(data) {\r\n        return new Promise((resolve, reject) => {\r\n            if (data.password) {\r\n                userModel.findOne({ \r\n                        email: data.email, \r\n                        resetPasswordExpires: { \r\n                            $gt: Date.now() \r\n                        } \r\n                    }, \r\n                    (err, obj) => {\r\n                    if (err){\r\n                        reject({ code: 500, msg: 'something went wrong' });\r\n                    }\r\n                    else {\r\n                        if (obj == null) {\r\n                            reject({ code: 403, msg: 'Password reset token is invalid or has expired.' });\r\n                        } else {\r\n                            userModel.findOne({ email: data.email }, (err, obj) => {\r\n                                if (err) reject({ code: 500, msg: 'something went wrong.' })\r\n                                else {\r\n                                    if(obj.resetPasswordToken === data.token){\r\n                                        bcrypt.genSalt(SALT_WORK_FACTOR, (err, salt) => {\r\n                                            if (err)\r\n                                                reject({ code: 500, msg: 'something went wrong.' })\r\n                                            bcrypt.hash(data.password, salt, null, (err, hash) => {\r\n                                                if (err)\r\n                                                    reject({ code: 500, msg: 'something went wrong.' });\r\n                                                userModel.findOneAndUpdate({email: data.email}, { $set: { password: hash, resetPasswordToken: null}}, (err, obj) => {\r\n                                                    if(err){\r\n                                                        reject({ code: 500, msg: \"something went wrong.\"})\r\n                                                    }else{\r\n                                                        resolve(\"Password Changed.\")\r\n                                                    }\r\n                                                })\r\n                                                \r\n                                            });\r\n                                        });\r\n                                    } else{\r\n                                        reject({ code: 500, msg: 'Link Expired' })\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            } else {\r\n                reject({ code: 422, msg: 'new password is required.' })\r\n            }\r\n        })    \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default new UserController();"]}