{"version":3,"sources":["../../src/controller/admin.js"],"names":["AdminController","data","Promise","resolve","reject","adminModel","findOne","then","adminData","code","msg","username","bcrypt","compare","password","err","res","console","log","payload","subject","token","jwt","sign","process","env","JWT_SECRET","undefined","User","aggregate","$match","uid","$lookup","$sort","result","catch","Alias","aid","$unwind","key","value"],"mappings":"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","file":"admin.js","sourcesContent":["import adminModel from '../models/admin'\nimport Alias from '../models/alias'\nimport User from '../models/user'\nimport bcrypt from 'bcrypt-nodejs'\nimport uuidv4 from 'uuid-v4'\nimport jwt from 'jsonwebtoken'\nimport request from \"request\"\n\nclass AdminController{\n    getAdmin(data){\n        // console.log(\"JWT:\"+process.env.JWT_SECRET)\n        return new Promise((resolve, reject) => {\n            adminModel.findOne({}).then((adminData) => {\n                if(!adminData)\n                {\n                    reject({ code: 500 , msg: 'err'})\n                }\n                else\n                {\n                    // console.log(data.username+\"***\"+data.password)\n                    // console.log(adminData.username+\"---\"+adminData.password)\n                    if(data.username === adminData.username)\n                    {\n                        bcrypt.compare(data.password, adminData.password, function(err, res) {\n                            console.log(\"Password: \"+res)\n                            if(res)\n                            {\n                                let payload = { subject: adminData.username }\n                                let token = jwt.sign(payload, process.env.JWT_SECRET)\n                                resolve({token})\n                            }\n                            else\n                                resolve(undefined);\n                        });\n                    }else\n                    {\n                        resolve(undefined);\n                    }\n                }\n            })\n        })\n    }\n\n    getUser(data)\n    {\n        return new Promise((resolve, reject) => {\n            // console.log(data.uid)\n            User.aggregate([\n                {\n                    $match: {\n                        \"userId\": data.uid\n                    }\n                },\n                { \n                    $lookup: {\n                        \"from\": \"aliases\",\n                        \"localField\": \"userId\",\n                        \"foreignField\": \"userId\",\n                        \"as\": \"aliases\"\n                    }\n                },\n                {\n                    $sort:{\n                        // \"created\":-1,\n                        \"aliases.created\":-1\n                    }\n                }\n            ]).then(result => {\n                // console.log(\"Result is: \"+ (result)?JSON.stringify(result):\"0\");  \n                // console.log(JSON.stringify(result[0].aliases))\n                resolve(result);\n                // console.log(val[0].user[0].email);\n            }).catch((err) => {\n                reject({ code: 500, msg: err });\n            });\n        })\n    }\n\n    getAlias(data)\n    {\n        return new Promise((resolve, reject) => {\n            Alias.aggregate([\n                {\n                    $match: {\n                        \"aliasId\": data.aid\n                    }\n                },\n                { \n                    $lookup: {\n                        \"from\": \"users\",\n                        \"localField\": \"userId\",\n                        \"foreignField\": \"userId\",\n                        \"as\": \"user\"\n                    }\n                },\n                {\n                    $unwind: \"$user\"\n                }\n            ]).then(result => {\n                // console.log(\"Result is: \"+ (result)?JSON.stringify(result):\"0\");  \n                // console.log(JSON.stringify(result[0].aliases))\n                resolve(result);\n                // console.log(val[0].user[0].email);\n            }).catch((err) => {\n                reject({ code: 500, msg: err });\n            });\n        })\n    }\n\n    getSearched(data)\n    {\n        return new Promise((resolve, reject) => {\n            if(data.key === \"aliasId\")\n            {\n                Alias.aggregate([\n                    {\n                        $match: {\n                            \"aliasId\": data.value\n                        }\n                    },\n                    { \n                        $lookup: {\n                            \"from\": \"users\",\n                            \"localField\": \"userId\",\n                            \"foreignField\": \"userId\",\n                            \"as\": \"user\"\n                        }\n                    },\n                    {\n                        $unwind: \"$user\"\n                    }\n                ]).then(result => {\n                    // console.log(\"Result is: \"+ (result)?JSON.stringify(result):\"0\");  \n                    // console.log(JSON.stringify(result[0].aliases))\n                    resolve(result);\n                    // console.log(val[0].user[0].email);\n                }).catch((err) => {\n                    reject({ code: 500, msg: err });\n                });\n            }\n            else if(data.key === \"alias\")\n            {\n                Alias.aggregate([\n                    {\n                        $match: {\n                            \"alias\": data.value\n                        }\n                    },\n                    { \n                        $lookup: {\n                            \"from\": \"users\",\n                            \"localField\": \"userId\",\n                            \"foreignField\": \"userId\",\n                            \"as\": \"user\"\n                        }\n                    },\n                    {\n                        $unwind: \"$user\"\n                    }\n                ]).then(result => {\n                    // console.log(\"Result is: \"+ (result)?JSON.stringify(result):\"0\");  \n                    // console.log(JSON.stringify(result[0].aliases))\n                    resolve(result);\n                    // console.log(val[0].user[0].email);\n                }).catch((err) => {\n                    reject({ code: 500, msg: err });\n                });\n            }\n            else if(data.key === \"email\")\n            {\n                User.aggregate([\n                    {\n                        $match: {\n                            \"email\": data.value\n                        }\n                    },\n                    { \n                        $lookup: {\n                            \"from\": \"aliases\",\n                            \"localField\": \"userId\",\n                            \"foreignField\": \"userId\",\n                            \"as\": \"aliases\"\n                        }\n                    },\n                    {\n                        $sort:{\n                            // \"created\":-1,\n                            \"aliases.created\":-1\n                        }\n                    }\n                ]).then(result => {\n                    // console.log(\"Result is: \"+ (result)?JSON.stringify(result):\"0\");  \n                    // console.log(JSON.stringify(result[0].aliases))\n                    resolve(result);\n                    // console.log(val[0].user[0].email);\n                }).catch((err) => {\n                    reject({ code: 500, msg: err });\n                });\n            }\n            else\n            {\n                User.aggregate([\n                    {\n                        $match: {\n                            \"userId\": data.value\n                        }\n                    },\n                    { \n                        $lookup: {\n                            \"from\": \"aliases\",\n                            \"localField\": \"userId\",\n                            \"foreignField\": \"userId\",\n                            \"as\": \"aliases\"\n                        }\n                    },\n                    {\n                        $sort:{\n                            // \"created\":-1,\n                            \"aliases.created\":-1\n                        }\n                    }\n                ]).then(result => {\n                    // console.log(\"Result is: \"+ (result)?JSON.stringify(result):\"0\");  \n                    // console.log(JSON.stringify(result[0].aliases))\n                    resolve(result);\n                    // console.log(val[0].user[0].email);\n                }).catch((err) => {\n                    reject({ code: 500, msg: err });\n                });\n            }\n            // resolve(data)\n        }) \n    }\n}\nexport default new AdminController(); "]}