{"version":3,"sources":["../../src/controller/alias.js"],"names":["URL","require","AliasController","getHostName","url","includes","match","length","randomString","string_length","chars","randomstring","i","rnum","Math","floor","random","substring","getDomain","hostName","domain","parts","split","reverse","toLowerCase","indexOf","data","console","log","Promise","resolve","reject","source","myCustUrl","str","hostname","substr","lastIndexOf","email_address","aliasModel","findOne","alias","then","isAvail","code","msg","aliasId","mailCount","refferedUrl","save","err","saved","registerUserOnMailServer","catch","token","aggregate","$match","userId","$lookup","$unwind","$project","$sort","result","status","findOneAndUpdate","body","params","remove","username","userModel","email","userInfo","postData","process","env","EMAIL_PASSWORD","EMAIL_SERVER","options","method","json","res","error","headers","statusCode","query","from","localField","foreignField","as","info"],"mappings":"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","file":"alias.js","sourcesContent":["import userModel from '../models/user';\r\nimport aliasModel from '../models/alias';\r\nimport proxyMailModel from '../models/proxymail'\r\nimport uuidv4 from 'uuid/v4';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport cred from '../config/const';\r\nimport uuidv3 from 'uuid/v3';\r\nimport request from 'request';\r\nimport { PromiseProvider } from 'mongoose';\r\nvar URL = require('url').URL;\r\n\r\n// import logger from '../utils/logger';\r\n\r\nclass AliasController {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    // checkAvailability(data) {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         aliasModel.findOne({ alias: data.alias }).then((data) => {\r\n    //             if (data) {\r\n    //                 reject({ code: 403, msg: 'Not available' })\r\n    //             } else {\r\n    //                 resolve(null)\r\n    //             }\r\n    //         })\r\n    //     }).catch((err) => {\r\n    //         reject({ code: 500, msg: 'something went wrong' })\r\n    //     });\r\n    // }\r\n\r\n    registerAlias(data) {\r\n        console.log(data);\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let source = data.source;\r\n            if (source === 'cust') {\r\n                let myCustUrl = new URL(data.url);\r\n                let str = myCustUrl.hostname;\r\n                let domain = str.substr(0, str.lastIndexOf('.'));\r\n                let email_address = domain + '@jinnmail.com'\r\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\r\n                    if (isAvail) {\r\n                        reject({ code: 403, msg: 'Not available' })\r\n                    } else {\r\n                        data.aliasId = uuidv4();\r\n                        data.alias = email_address;\r\n                        data.mailCount = 0;\r\n                        data.refferedUrl = data.url;\r\n                        let alias = new aliasModel(data);\r\n                        alias.save((err, saved) => {\r\n                            console.log(err)\r\n                            if (err) {\r\n                                reject({ code: 500, msg: 'something went wrong' })\r\n                            } else {\r\n                                this.registerUserOnMailServer(saved, domain ).then((data) => {\r\n                                    resolve(saved)\r\n                                }).catch((err) => {\r\n                                    reject({ code: 500, msg: 'something went wrong' })\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }).catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n            } else {\r\n                let domain = this.getDomain(data.url);\r\n                let token = this.randomString(6);\r\n                let email_address = domain + '.' + token + '@jinnmail.com'\r\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\r\n                    if (isAvail) {\r\n                        reject({ code: 403, msg: 'Not available' })\r\n                    } else {\r\n                        data.aliasId = uuidv4();\r\n                        data.alias = email_address;\r\n                        data.mailCount = 0;\r\n                        data.refferedUrl = data.url;\r\n                        let alias = new aliasModel(data);\r\n                        alias.save((err, saved) => {\r\n                            console.log(err)\r\n                            if (err) {\r\n                                reject({ code: 500, msg: 'something went wrong' })\r\n                            } else {\r\n                                this.registerUserOnMailServer(saved, domain + '.' + token).then((data) => {\r\n                                    resolve(saved)\r\n                                }).catch((err) => {\r\n                                    reject({ code: 500, msg: 'something went wrong' })\r\n                                })\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                }).catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    getRegisteredAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            // aliasModel.find({ userId: data.userId }).sort({ created: -1 }).then((aliases) => {\r\n            //     resolve(aliases)\r\n            // }).catch((err) => {\r\n            //     reject({ code: 500, msg: 'something went wrong' });\r\n            // })\r\n            aliasModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        \"userId\": data.userId\r\n                    }\r\n                },\r\n                { \r\n                    $lookup: {\r\n                        \"from\": \"users\",\r\n                        \"localField\": \"userId\",\r\n                        \"foreignField\": \"userId\",\r\n                        \"as\": \"Details\"\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: \"$Details\"\r\n                },\r\n                {\r\n                    $project: {\r\n                        \"aliasId\":1,\r\n                        \"userId\":1,\r\n                        \"alias\":1,\r\n                        \"refferedUrl\":1,\r\n                        \"status\":1,\r\n                        \"created\":1,\r\n                        \"mailCount\":1,\r\n                        \"email\":\"$Details.email\"\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        \"created\": -1\r\n                    }\r\n                }\r\n            ]).then(result => {\r\n                // console.log(\"Result is:========================== \\n\"+ (result)?JSON.stringify(result):\"0\"+\"\\n====================================================================\");  \r\n                resolve(result);\r\n                // console.log(val[0].user[0].email);\r\n            }).catch((err) => {\r\n                reject({ code: 500, msg: err });\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n    getAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            aliasModel.aggregate([\r\n                { \r\n                    $lookup: {\r\n                        \"from\": \"users\",\r\n                        \"localField\": \"userId\",\r\n                        \"foreignField\": \"userId\",\r\n                        \"as\": \"Details\"\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: \"$Details\"\r\n                },\r\n                {\r\n                    $project: {\r\n                        \"aliasId\":1,\r\n                        \"userId\":1,\r\n                        \"alias\":1,\r\n                        \"refferedUrl\":1,\r\n                        \"status\":1,\r\n                        \"created\":1,\r\n                        \"mailCount\":1,\r\n                        \"email\":\"$Details.email\"\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        \"created\": -1\r\n                    }\r\n                }\r\n            ]).then(result => {\r\n                // console.log(\"Result is:========================== \\n\"+ (result)?JSON.stringify(result):\"0\"+\"\\n====================================================================\");  \r\n                resolve(result);\r\n                // console.log(val[0].user[0].email);\r\n            }).catch((err) => {\r\n                reject({ code: 500, msg: err });\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n    changeStatusOfAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(data.aliasId, data.status)\r\n                aliasModel.findOneAndUpdate({ aliasId: data.aliasId }, { status: data.status })\r\n                    .then((alias) => {\r\n                        console.log(alias)\r\n                        resolve(null)\r\n                    }).catch((err) => {\r\n                        reject({ code: 500, msg: 'something went wrong' });\r\n                    })\r\n        })\r\n    }\r\n\r\n    deleteAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(data.body.userId, data.params.aliasId);\r\n            aliasModel.remove({ aliasId: data.params.aliasId })\r\n                .then((data) => {\r\n                    resolve(null)\r\n                })\r\n                .catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n        })\r\n\r\n    }\r\n\r\n    //parsing domain name \r\n    getHostName = (url) => {\r\n        url = url.includes('http')?url:'http://'+url;\r\n        //console.log(url,\"url129\")\r\n        var match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\r\n        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {\r\n            return match[2];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //end\r\n\r\n    // generating a random number \r\n\r\n    randomString = (string_length) => {\r\n        let chars = \"0123456789abcdefghiklmnopqrstuvwxyz\";\r\n        let randomstring = '';\r\n        for (let i = 0; i < string_length; i++) {\r\n            let rnum = Math.floor(Math.random() * chars.length);\r\n            randomstring += chars.substring(rnum, rnum + 1);\r\n        }\r\n        return randomstring;\r\n    }\r\n\r\n\r\n    getDomain = (url) => {\r\n        let hostName = this.getHostName(url);\r\n        let domain = hostName;\r\n\r\n        if (hostName != null) {\r\n            let parts = hostName.split('.').reverse();\r\n\r\n            if (parts != null && parts.length > 1) {\r\n                domain = parts[1] + '.' + parts[0];\r\n\r\n                if (hostName.toLowerCase().indexOf('.co.uk') != -1 && parts.length > 2) {\r\n                    domain = parts[2] + '.' + domain;\r\n                }\r\n            }\r\n        }\r\n\r\n        return domain.split('.')[0];\r\n    }\r\n\r\n\r\n\r\n    registerUserOnMailServer(data, username) {\r\n        return new Promise((resolve, reject) => {\r\n            //console.log(data)\r\n            userModel.findOne({ userId: data.userId }, { email: 1 }).then((userInfo) => {\r\n                let postData = {\r\n                    \"username\": username,\r\n                    \"password\": process.env.EMAIL_PASSWORD,\r\n                    \"targets\": [],\r\n                    \"disabledScopes\": []\r\n                }\r\n\r\n                let url = process.env.EMAIL_SERVER + 'users'\r\n                let options = {\r\n                    method: 'post',\r\n                    body: postData,\r\n                    json: true,\r\n                    url: url\r\n                };\r\n                request(options, function (err, res, body) {\r\n                    if (err) {\r\n                        console.error('error posting json: ', err)\r\n                        throw err\r\n                    }\r\n                    var headers = res.headers\r\n                    var statusCode = res.statusCode\r\n                    console.log('headers: ', headers)\r\n                    console.log('statusCode: ', statusCode)\r\n                    console.log('body: ', body)\r\n                    resolve('ok')\r\n                })\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    getAliasUser(data) {\r\n        return new Promise((resolve, reject) => {\r\n            let alias = data.query.alias;\r\n            console.log(alias)\r\n            aliasModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        alias: alias\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: 'users',\r\n                        localField: 'userId',\r\n                        foreignField: 'userId',\r\n                        as: 'userInfo'\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: \"$userInfo\"\r\n                },\r\n                {\r\n                    $project:{\r\n                        email:'$userInfo.email',\r\n                        status:1\r\n                    }\r\n                }\r\n            ]).then((info) => {\r\n                resolve(info)\r\n            })\r\n        })\r\n\r\n    }\r\n        \r\n\r\n\r\n}\r\n\r\nexport default new AliasController();"]}