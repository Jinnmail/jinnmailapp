{"version":3,"sources":["../../src/controller/alias.js"],"names":["AliasController","getHostName","url","match","length","randomString","string_length","chars","randomstring","i","rnum","Math","floor","random","substring","getDomain","hostName","domain","parts","split","reverse","toLowerCase","indexOf","data","console","log","Promise","resolve","reject","source","email_address","aliasModel","findOne","alias","then","isAvail","code","msg","aliasId","refferedUrl","save","err","saved","catch","token","find","userId","sort","created","aliases","status","findOneAndUpdate","body","params","remove"],"mappings":"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","file":"alias.js","sourcesContent":["import userModel from '../models/user';\r\nimport aliasModel from '../models/alias';\r\nimport proxyMailModel from '../models/proxymail'\r\nimport uuidv4 from 'uuid/v4';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport cred from '../config/const';\r\nimport uuidv3 from 'uuid/v3';\r\n\r\n// import logger from '../utils/logger';\r\n\r\nclass AliasController {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    // checkAvailability(data) {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         aliasModel.findOne({ alias: data.alias }).then((data) => {\r\n    //             if (data) {\r\n    //                 reject({ code: 403, msg: 'Not available' })\r\n    //             } else {\r\n    //                 resolve(null)\r\n    //             }\r\n    //         })\r\n    //     }).catch((err) => {\r\n    //         reject({ code: 500, msg: 'something went wrong' })\r\n    //     });\r\n    // }\r\n\r\n    registerAlias(data) {\r\n        console.log(data);\r\n        return new Promise((resolve, reject) => {\r\n            let domain = this.getDomain(data.url);\r\n            let source = data.source;\r\n            if (source === 'cust'){\r\n                \r\n                let email_address = domain + '@jinnmail.com'\r\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\r\n                    if (isAvail) {\r\n                        reject({ code: 403, msg: 'Not available' })\r\n                    } else {\r\n                        data.aliasId = uuidv4();\r\n                        data.alias = email_address;\r\n                        data.refferedUrl = data.url;\r\n                        let alias = new aliasModel(data);\r\n                        alias.save((err, saved) => {\r\n                            console.log(err)\r\n                            if (err) {\r\n                                reject({ code: 500, msg: 'something went wrong' })\r\n                            } else {\r\n                                resolve(saved)\r\n                            }\r\n                        })\r\n                    }\r\n                }).catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n            } else {\r\n                let token = this.randomString(6);\r\n                let email_address = domain + '.' + token + '@jinnmail.com'\r\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\r\n                    if (isAvail) {\r\n                        reject({ code: 403, msg: 'Not available' })\r\n                    } else {\r\n                        data.aliasId = uuidv4();\r\n                        data.alias = email_address;\r\n                        data.refferedUrl = data.url;\r\n                        let alias = new aliasModel(data);\r\n                        alias.save((err, saved) => {\r\n                            console.log(err)\r\n                            if (err) {\r\n                                reject({ code: 500, msg: 'something went wrong' })\r\n                            } else {\r\n                                resolve(saved)\r\n                            }\r\n                        })\r\n                    }\r\n                }).catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    getRegisteredAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            aliasModel.find({ userId: data.userId }).sort({ created: -1 }).then((aliases) => {\r\n                resolve(aliases)\r\n            }).catch((err) => {\r\n                reject({ code: 500, msg: 'something went wrong' });\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    changeStatusOfAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(data.aliasId, data.status)\r\n            aliasModel.findOneAndUpdate({ aliasId: data.aliasId }, { status: data.status }).then((alias) => {\r\n                console.log(alias)\r\n                resolve(null)\r\n            }).catch((err) => {\r\n                reject({ code: 500, msg: 'something went wrong' });\r\n            })\r\n        })\r\n    }\r\n\r\n    deleteAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(data.body.userId, data.params.aliasId);\r\n            aliasModel.remove({ aliasId: data.params.aliasId }).then((data) => {\r\n                resolve(null)\r\n            })\r\n                .catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n        })\r\n\r\n    }\r\n\r\n    //parsing domain name \r\n    getHostName = (url) => {\r\n        var match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\r\n        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {\r\n            return match[2];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //end\r\n\r\n    // generating a random number \r\n\r\n    randomString = (string_length) => {\r\n        let chars = \"0123456789abcdefghiklmnopqrstuvwxyz\";\r\n        let randomstring = '';\r\n        for (let i = 0; i < string_length; i++) {\r\n            let rnum = Math.floor(Math.random() * chars.length);\r\n            randomstring += chars.substring(rnum, rnum + 1);\r\n        }\r\n        return randomstring;\r\n    }\r\n\r\n\r\n    getDomain = (url) => {\r\n        let hostName = this.getHostName(url);\r\n        let domain = hostName;\r\n\r\n        if (hostName != null) {\r\n            let parts = hostName.split('.').reverse();\r\n\r\n            if (parts != null && parts.length > 1) {\r\n                domain = parts[1] + '.' + parts[0];\r\n\r\n                if (hostName.toLowerCase().indexOf('.co.uk') != -1 && parts.length > 2) {\r\n                    domain = parts[2] + '.' + domain;\r\n                }\r\n            }\r\n        }\r\n\r\n        return domain.split('.')[0];\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new AliasController();"]}