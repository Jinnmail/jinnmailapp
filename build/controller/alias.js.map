{"version":3,"sources":["../../src/controller/alias.js"],"names":["URL","require","AliasController","getHostName","url","includes","match","length","randomString","string_length","chars","randomstring","i","rnum","Math","floor","random","substring","getDomain","hostName","domain","parts","split","reverse","toLowerCase","indexOf","data","console","log","Promise","resolve","reject","source","myCustUrl","str","hostname","substr","lastIndexOf","email_address","aliasModel","findOne","alias","then","isAvail","code","msg","aliasId","refferedUrl","save","err","saved","registerUserOnMailServer","catch","token","find","userId","sort","created","aliases","status","findOneAndUpdate","body","params","remove","username","userModel","email","userInfo","postData","process","env","EMAIL_PASSWORD","EMAIL_SERVER","options","method","json","res","error","headers","statusCode"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AACA,IAAIA,MAAMC,QAAQ,KAAR,EAAeD,GAAzB;;AAEA;;IAEME,e;AAEF,+BAAc;AAAA;;AAAA;;AAAA,aA0HdC,WA1Hc,GA0HA,UAACC,GAAD,EAAS;AACnBA,kBAAMA,IAAIC,QAAJ,CAAa,MAAb,IAAqBD,GAArB,GAAyB,YAAUA,GAAzC;AACA;AACA,gBAAIE,QAAQF,IAAIE,KAAJ,CAAU,+BAAV,CAAZ;AACA,gBAAIA,SAAS,IAAT,IAAiBA,MAAMC,MAAN,GAAe,CAAhC,IAAqC,OAAOD,MAAM,CAAN,CAAP,KAAoB,QAAzD,IAAqEA,MAAM,CAAN,EAASC,MAAT,GAAkB,CAA3F,EAA8F;AAC1F,uBAAOD,MAAM,CAAN,CAAP;AACH,aAFD,MAGK;AACD,uBAAO,IAAP;AACH;AACJ,SApIa;;AAAA,aA0IdE,YA1Ic,GA0IC,UAACC,aAAD,EAAmB;AAC9B,gBAAIC,QAAQ,qCAAZ;AACA,gBAAIC,eAAe,EAAnB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,aAApB,EAAmCG,GAAnC,EAAwC;AACpC,oBAAIC,OAAOC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBN,MAAMH,MAAjC,CAAX;AACAI,gCAAgBD,MAAMO,SAAN,CAAgBJ,IAAhB,EAAsBA,OAAO,CAA7B,CAAhB;AACH;AACD,mBAAOF,YAAP;AACH,SAlJa;;AAAA,aAqJdO,SArJc,GAqJF,UAACd,GAAD,EAAS;AACjB,gBAAIe,WAAW,MAAKhB,WAAL,CAAiBC,GAAjB,CAAf;AACA,gBAAIgB,SAASD,QAAb;;AAEA,gBAAIA,YAAY,IAAhB,EAAsB;AAClB,oBAAIE,QAAQF,SAASG,KAAT,CAAe,GAAf,EAAoBC,OAApB,EAAZ;;AAEA,oBAAIF,SAAS,IAAT,IAAiBA,MAAMd,MAAN,GAAe,CAApC,EAAuC;AACnCa,6BAASC,MAAM,CAAN,IAAW,GAAX,GAAiBA,MAAM,CAAN,CAA1B;;AAEA,wBAAIF,SAASK,WAAT,GAAuBC,OAAvB,CAA+B,QAA/B,KAA4C,CAAC,CAA7C,IAAkDJ,MAAMd,MAAN,GAAe,CAArE,EAAwE;AACpEa,iCAASC,MAAM,CAAN,IAAW,GAAX,GAAiBD,MAA1B;AACH;AACJ;AACJ;;AAED,mBAAOA,OAAOE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAP;AACH,SAtKa;AAEb;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCAEcI,I,EAAM;AAAA;;AAChBC,oBAAQC,GAAR,CAAYF,IAAZ;AACA,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,SAASN,KAAKM,MAAlB;AACA,oBAAIA,WAAW,MAAf,EAAuB;AACnB,wBAAIC,YAAY,IAAIjC,GAAJ,CAAQ0B,KAAKtB,GAAb,CAAhB;AACA,wBAAI8B,MAAMD,UAAUE,QAApB;AACA,wBAAIf,SAASc,IAAIE,MAAJ,CAAW,CAAX,EAAcF,IAAIG,WAAJ,CAAgB,GAAhB,CAAd,CAAb;AACA,wBAAIC,gBAAgBlB,SAAS,eAA7B;AACAmB,oCAAWC,OAAX,CAAmB,EAAEC,OAAOH,aAAT,EAAnB,EAA6CI,IAA7C,CAAkD,UAACC,OAAD,EAAa;AAC3D,4BAAIA,OAAJ,EAAa;AACTZ,mCAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,eAAlB,EAAP;AACH,yBAFD,MAEO;AACHnB,iCAAKoB,OAAL,GAAe,kBAAf;AACApB,iCAAKe,KAAL,GAAaH,aAAb;AACAZ,iCAAKqB,WAAL,GAAmBrB,KAAKtB,GAAxB;AACA,gCAAIqC,QAAQ,IAAIF,eAAJ,CAAeb,IAAf,CAAZ;AACAe,kCAAMO,IAAN,CAAW,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACvBvB,wCAAQC,GAAR,CAAYqB,GAAZ;AACA,oCAAIA,GAAJ,EAAS;AACLlB,2CAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,iCAFD,MAEO;AACH,2CAAKM,wBAAL,CAA8BD,KAA9B,EAAqC9B,MAArC,EAA8CsB,IAA9C,CAAmD,UAAChB,IAAD,EAAU;AACzDI,gDAAQoB,KAAR;AACH,qCAFD,EAEGE,KAFH,CAES,UAACH,GAAD,EAAS;AACdlB,+CAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,qCAJD;AAKH;AACJ,6BAXD;AAYH;AACJ,qBArBD,EAqBGO,KArBH,CAqBS,UAACH,GAAD,EAAS;AACdlB,+BAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,qBAvBD;AAwBH,iBA7BD,MA6BO;AACH,wBAAIzB,UAAS,OAAKF,SAAL,CAAeQ,KAAKtB,GAApB,CAAb;AACA,wBAAIiD,QAAQ,OAAK7C,YAAL,CAAkB,CAAlB,CAAZ;AACA,wBAAI8B,iBAAgBlB,UAAS,GAAT,GAAeiC,KAAf,GAAuB,eAA3C;AACAd,oCAAWC,OAAX,CAAmB,EAAEC,OAAOH,cAAT,EAAnB,EAA6CI,IAA7C,CAAkD,UAACC,OAAD,EAAa;AAC3D,4BAAIA,OAAJ,EAAa;AACTZ,mCAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,eAAlB,EAAP;AACH,yBAFD,MAEO;AACHnB,iCAAKoB,OAAL,GAAe,kBAAf;AACApB,iCAAKe,KAAL,GAAaH,cAAb;AACAZ,iCAAKqB,WAAL,GAAmBrB,KAAKtB,GAAxB;AACA,gCAAIqC,QAAQ,IAAIF,eAAJ,CAAeb,IAAf,CAAZ;AACAe,kCAAMO,IAAN,CAAW,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACvBvB,wCAAQC,GAAR,CAAYqB,GAAZ;AACA,oCAAIA,GAAJ,EAAS;AACLlB,2CAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,iCAFD,MAEO;AACH,2CAAKM,wBAAL,CAA8BD,KAA9B,EAAqC9B,UAAS,GAAT,GAAeiC,KAApD,EAA2DX,IAA3D,CAAgE,UAAChB,IAAD,EAAU;AACtEI,gDAAQoB,KAAR;AACH,qCAFD,EAEGE,KAFH,CAES,UAACH,GAAD,EAAS;AACdlB,+CAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,qCAJD;AAMH;AACJ,6BAZD;AAaH;AACJ,qBAtBD,EAsBGO,KAtBH,CAsBS,UAACH,GAAD,EAAS;AACdlB,+BAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,qBAxBD;AAyBH;AACJ,aA9DM,CAAP;AA+DH;;;2CAEkBnB,I,EAAM;AACrB,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCQ,gCAAWe,IAAX,CAAgB,EAAEC,QAAQ7B,KAAK6B,MAAf,EAAhB,EAAyCC,IAAzC,CAA8C,EAAEC,SAAS,CAAC,CAAZ,EAA9C,EAA+Df,IAA/D,CAAoE,UAACgB,OAAD,EAAa;AAC7E5B,4BAAQ4B,OAAR;AACH,iBAFD,EAEGN,KAFH,CAES,UAACH,GAAD,EAAS;AACdlB,2BAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,iBAJD;AAKH,aANM,CAAP;AAQH;;;4CAEmBnB,I,EAAM;AACtB,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,wBAAQC,GAAR,CAAYF,KAAKoB,OAAjB,EAA0BpB,KAAKiC,MAA/B;AACApB,gCAAWqB,gBAAX,CAA4B,EAAEd,SAASpB,KAAKoB,OAAhB,EAA5B,EAAuD,EAAEa,QAAQjC,KAAKiC,MAAf,EAAvD,EAAgFjB,IAAhF,CAAqF,UAACD,KAAD,EAAW;AAC5Fd,4BAAQC,GAAR,CAAYa,KAAZ;AACAX,4BAAQ,IAAR;AACH,iBAHD,EAGGsB,KAHH,CAGS,UAACH,GAAD,EAAS;AACdlB,2BAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,iBALD;AAMH,aARM,CAAP;AASH;;;oCAEWnB,I,EAAM;AACd,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,wBAAQC,GAAR,CAAYF,KAAKmC,IAAL,CAAUN,MAAtB,EAA8B7B,KAAKoC,MAAL,CAAYhB,OAA1C;AACAP,gCAAWwB,MAAX,CAAkB,EAAEjB,SAASpB,KAAKoC,MAAL,CAAYhB,OAAvB,EAAlB,EAAoDJ,IAApD,CAAyD,UAAChB,IAAD,EAAU;AAC/DI,4BAAQ,IAAR;AACH,iBAFD,EAGKsB,KAHL,CAGW,UAACH,GAAD,EAAS;AACZlB,2BAAO,EAAEa,MAAM,GAAR,EAAaC,KAAK,sBAAlB,EAAP;AACH,iBALL;AAMH,aARM,CAAP;AAUH;;AAED;;;AAaA;;AAEA;;;;iDAkCyBnB,I,EAAMsC,Q,EAAU;AACrC,mBAAO,IAAInC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACAkC,+BAAUzB,OAAV,CAAkB,EAAEe,QAAQ7B,KAAK6B,MAAf,EAAlB,EAA2C,EAAEW,OAAO,CAAT,EAA3C,EAAyDxB,IAAzD,CAA8D,UAACyB,QAAD,EAAc;AACxE,wBAAIC,WAAW;AACX,oCAAYJ,QADD;AAEX,oCAAYK,QAAQC,GAAR,CAAYC,cAFb;AAGX,mCAAW,CAACJ,SAASD,KAAV,CAHA;AAIX,0CAAkB;AAJP,qBAAf;;AAOA,wBAAI9D,MAAMiE,QAAQC,GAAR,CAAYE,YAAZ,GAA2B,OAArC;AACA,wBAAIC,UAAU;AACVC,gCAAQ,MADE;AAEVb,8BAAMO,QAFI;AAGVO,8BAAM,IAHI;AAIVvE,6BAAKA;AAJK,qBAAd;AAMA,2CAAQqE,OAAR,EAAiB,UAAUxB,GAAV,EAAe2B,GAAf,EAAoBf,IAApB,EAA0B;AACvC,4BAAIZ,GAAJ,EAAS;AACLtB,oCAAQkD,KAAR,CAAc,sBAAd,EAAsC5B,GAAtC;AACA,kCAAMA,GAAN;AACH;AACD,4BAAI6B,UAAUF,IAAIE,OAAlB;AACA,4BAAIC,aAAaH,IAAIG,UAArB;AACApD,gCAAQC,GAAR,CAAY,WAAZ,EAAyBkD,OAAzB;AACAnD,gCAAQC,GAAR,CAAY,cAAZ,EAA4BmD,UAA5B;AACApD,gCAAQC,GAAR,CAAY,QAAZ,EAAsBiC,IAAtB;AACA/B,gCAAQ,IAAR;AACH,qBAXD;AAYH,iBA3BD,EA2BGsB,KA3BH,CA2BS,UAACH,GAAD,EAAS;AACdlB,2BAAOkB,GAAP;AACH,iBA7BD;AA+BH,aAjCM,CAAP;AAkCH;;;;;;kBAOU,IAAI/C,eAAJ,E","file":"alias.js","sourcesContent":["import userModel from '../models/user';\r\nimport aliasModel from '../models/alias';\r\nimport proxyMailModel from '../models/proxymail'\r\nimport uuidv4 from 'uuid/v4';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nimport cred from '../config/const';\r\nimport uuidv3 from 'uuid/v3';\r\nimport request from 'request';\r\nvar URL = require('url').URL;\r\n\r\n// import logger from '../utils/logger';\r\n\r\nclass AliasController {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    // checkAvailability(data) {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         aliasModel.findOne({ alias: data.alias }).then((data) => {\r\n    //             if (data) {\r\n    //                 reject({ code: 403, msg: 'Not available' })\r\n    //             } else {\r\n    //                 resolve(null)\r\n    //             }\r\n    //         })\r\n    //     }).catch((err) => {\r\n    //         reject({ code: 500, msg: 'something went wrong' })\r\n    //     });\r\n    // }\r\n\r\n    registerAlias(data) {\r\n        console.log(data);\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let source = data.source;\r\n            if (source === 'cust') {\r\n                let myCustUrl = new URL(data.url);\r\n                let str = myCustUrl.hostname;\r\n                let domain = str.substr(0, str.lastIndexOf('.'));\r\n                let email_address = domain + '@jinnmail.com'\r\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\r\n                    if (isAvail) {\r\n                        reject({ code: 403, msg: 'Not available' })\r\n                    } else {\r\n                        data.aliasId = uuidv4();\r\n                        data.alias = email_address;\r\n                        data.refferedUrl = data.url;\r\n                        let alias = new aliasModel(data);\r\n                        alias.save((err, saved) => {\r\n                            console.log(err)\r\n                            if (err) {\r\n                                reject({ code: 500, msg: 'something went wrong' })\r\n                            } else {\r\n                                this.registerUserOnMailServer(saved, domain ).then((data) => {\r\n                                    resolve(saved)\r\n                                }).catch((err) => {\r\n                                    reject({ code: 500, msg: 'something went wrong' })\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }).catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n            } else {\r\n                let domain = this.getDomain(data.url);\r\n                let token = this.randomString(6);\r\n                let email_address = domain + '.' + token + '@jinnmail.com'\r\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\r\n                    if (isAvail) {\r\n                        reject({ code: 403, msg: 'Not available' })\r\n                    } else {\r\n                        data.aliasId = uuidv4();\r\n                        data.alias = email_address;\r\n                        data.refferedUrl = data.url;\r\n                        let alias = new aliasModel(data);\r\n                        alias.save((err, saved) => {\r\n                            console.log(err)\r\n                            if (err) {\r\n                                reject({ code: 500, msg: 'something went wrong' })\r\n                            } else {\r\n                                this.registerUserOnMailServer(saved, domain + '.' + token).then((data) => {\r\n                                    resolve(saved)\r\n                                }).catch((err) => {\r\n                                    reject({ code: 500, msg: 'something went wrong' })\r\n                                })\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                }).catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    getRegisteredAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            aliasModel.find({ userId: data.userId }).sort({ created: -1 }).then((aliases) => {\r\n                resolve(aliases)\r\n            }).catch((err) => {\r\n                reject({ code: 500, msg: 'something went wrong' });\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    changeStatusOfAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(data.aliasId, data.status)\r\n            aliasModel.findOneAndUpdate({ aliasId: data.aliasId }, { status: data.status }).then((alias) => {\r\n                console.log(alias)\r\n                resolve(null)\r\n            }).catch((err) => {\r\n                reject({ code: 500, msg: 'something went wrong' });\r\n            })\r\n        })\r\n    }\r\n\r\n    deleteAlias(data) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(data.body.userId, data.params.aliasId);\r\n            aliasModel.remove({ aliasId: data.params.aliasId }).then((data) => {\r\n                resolve(null)\r\n            })\r\n                .catch((err) => {\r\n                    reject({ code: 500, msg: 'something went wrong' })\r\n                })\r\n        })\r\n\r\n    }\r\n\r\n    //parsing domain name \r\n    getHostName = (url) => {\r\n        url = url.includes('http')?url:'http://'+url;\r\n        //console.log(url,\"url129\")\r\n        var match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\r\n        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {\r\n            return match[2];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //end\r\n\r\n    // generating a random number \r\n\r\n    randomString = (string_length) => {\r\n        let chars = \"0123456789abcdefghiklmnopqrstuvwxyz\";\r\n        let randomstring = '';\r\n        for (let i = 0; i < string_length; i++) {\r\n            let rnum = Math.floor(Math.random() * chars.length);\r\n            randomstring += chars.substring(rnum, rnum + 1);\r\n        }\r\n        return randomstring;\r\n    }\r\n\r\n\r\n    getDomain = (url) => {\r\n        let hostName = this.getHostName(url);\r\n        let domain = hostName;\r\n\r\n        if (hostName != null) {\r\n            let parts = hostName.split('.').reverse();\r\n\r\n            if (parts != null && parts.length > 1) {\r\n                domain = parts[1] + '.' + parts[0];\r\n\r\n                if (hostName.toLowerCase().indexOf('.co.uk') != -1 && parts.length > 2) {\r\n                    domain = parts[2] + '.' + domain;\r\n                }\r\n            }\r\n        }\r\n\r\n        return domain.split('.')[0];\r\n    }\r\n\r\n\r\n\r\n    registerUserOnMailServer(data, username) {\r\n        return new Promise((resolve, reject) => {\r\n            //console.log(data)\r\n            userModel.findOne({ userId: data.userId }, { email: 1 }).then((userInfo) => {\r\n                let postData = {\r\n                    \"username\": username,\r\n                    \"password\": process.env.EMAIL_PASSWORD,\r\n                    \"targets\": [userInfo.email],\r\n                    \"disabledScopes\": []\r\n                }\r\n\r\n                let url = process.env.EMAIL_SERVER + 'users'\r\n                let options = {\r\n                    method: 'post',\r\n                    body: postData,\r\n                    json: true,\r\n                    url: url\r\n                };\r\n                request(options, function (err, res, body) {\r\n                    if (err) {\r\n                        console.error('error posting json: ', err)\r\n                        throw err\r\n                    }\r\n                    var headers = res.headers\r\n                    var statusCode = res.statusCode\r\n                    console.log('headers: ', headers)\r\n                    console.log('statusCode: ', statusCode)\r\n                    console.log('body: ', body)\r\n                    resolve('ok')\r\n                })\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default new AliasController();"]}