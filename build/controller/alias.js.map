{"version":3,"sources":["../../src/controller/alias.js"],"names":["URL","require","AliasController","getHostName","url","includes","match","length","randomString","string_length","chars","randomstring","i","rnum","Math","floor","random","substring","getDomain","hostName","domain","parts","split","reverse","toLowerCase","indexOf","data","console","log","Promise","resolve","reject","source","myCustUrl","str","hostname","substr","lastIndexOf","email_address","aliasModel","findOne","alias","then","isAvail","code","msg","aliasId","mailCount","refferedUrl","save","err","saved","registerUserOnMailServer","d","catch","token","x","registerMailboxesOnServer","id","params","deleteAlias","aggregate","$match","userId","$lookup","$unwind","$project","$sort","result","findOneAndUpdate","status","remove","options","method","json","res","body","link","opt","error","content","mailboxes","results","mailData","address","wildduckId","map","m","name","inboxId","sentId","mail","mailModel","username","userModel","email","userInfo","postData","process","env","EMAIL_PASSWORD","EMAIL_SERVER","headers","statusCode","query","from","localField","foreignField","as","info"],"mappings":"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","file":"alias.js","sourcesContent":["import userModel from '../models/user';\nimport aliasModel from '../models/alias';\nimport mailModel from '../models/mailDetails';\nimport proxyMailModel from '../models/proxymail'\nimport uuidv4 from 'uuid/v4';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt-nodejs';\nimport cred from '../config/const';\nimport uuidv3 from 'uuid/v3';\nimport request from 'request';\nimport { PromiseProvider } from 'mongoose';\nvar URL = require('url').URL;\n\n// import logger from '../utils/logger';\n\nclass AliasController {\n\n    constructor() {\n\n    }\n\n    // checkAvailability(data) {\n    //     return new Promise((resolve, reject) => {\n    //         aliasModel.findOne({ alias: data.alias }).then((data) => {\n    //             if (data) {\n    //                 reject({ code: 403, msg: 'Not available' })\n    //             } else {\n    //                 resolve(null)\n    //             }\n    //         })\n    //     }).catch((err) => {\n    //         reject({ code: 500, msg: 'something went wrong' })\n    //     });\n    // }\n\n    registerAlias(data) {\n        console.log(\"\\nRegister Alias Data:\",data);\n        return new Promise((resolve, reject) => {\n            \n            let source = data.source;\n            if (source === 'cust') {\n                let myCustUrl = new URL(data.url);\n                let str = myCustUrl.hostname;\n                let domain = str.substr(0, str.lastIndexOf('.'));\n                let email_address = domain + '@jinnmail.com'\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\n                    if (isAvail) {\n                        reject({ code: 403, msg: 'Not available' })\n                    } else {\n                        data.aliasId = uuidv4();\n                        data.alias = email_address;\n                        data.mailCount = 0;\n                        data.refferedUrl = data.url;\n                        let alias = new aliasModel(data);\n                        alias.save((err, saved) => {\n                            console.log(err)\n                            if (err) {\n                                reject({ code: 500, msg: 'something went wrong' })\n                            } else {\n                                this.registerUserOnMailServer(saved, domain ).then((d) => {\n                                    resolve(saved)\n                                }).catch((err) => {\n                                    reject({ code: 500, msg: 'something went wrong' })\n                                })\n                            }\n                        })\n                    }\n                }).catch((err) => {\n                    reject({ code: 500, msg: 'something went wrong' })\n                })\n            } else {\n                let domain = this.getDomain(data.url);\n                let token = this.randomString(6);\n                let email_address = domain + '.' + token + '@jinnmail.com'\n                aliasModel.findOne({ alias: email_address }).then((isAvail) => {\n                    if (isAvail) {\n                        reject({ code: 403, msg: 'Not available' })\n                    } else {\n                        data.aliasId = uuidv4();\n                        data.alias = email_address;\n                        data.mailCount = 0;\n                        data.refferedUrl = data.url;\n                        let alias = new aliasModel(data);\n                        alias.save((err, saved) => {\n                            console.log(err)\n                            if (err) {\n                                reject({ code: 500, msg: 'something went wrong' })\n                            } else {\n                                this.registerUserOnMailServer(saved, domain + '.' + token).then((x) => {\n                                    console.log(\"\\nMail Server Data: \",x)\n                                    this.registerMailboxesOnServer(x.id).then(x => {\n                                        console.log(\"MailBoxes Updated\")\n                                        resolve(saved)\n                                    }).catch( err => {\n                                        var d = {\n                                            params: {\n                                                aliasId: x.id\n                                            }\n                                        }\n                                        this.deleteAlias(d).then( x => {\n                                            reject({ code: 500, msg: 'something went wrong' })\n                                        }).catch(err => {\n                                            reject({ code: 500, msg: 'something went wrong' })\n                                        })\n                                    })\n                                }).catch((err) => {\n                                    reject({ code: 500, msg: 'something went wrong' })\n                                })\n\n                            }\n                        })\n                    }\n                }).catch((err) => {\n                    reject({ code: 500, msg: 'something went wrong' })\n                })\n            }\n        });\n    }\n\n    getRegisteredAlias(data) {\n        return new Promise((resolve, reject) => {\n            // aliasModel.find({ userId: data.userId }).sort({ created: -1 }).then((aliases) => {\n            //     resolve(aliases)\n            // }).catch((err) => {\n            //     reject({ code: 500, msg: 'something went wrong' });\n            // })\n            aliasModel.aggregate([\n                {\n                    $match: {\n                        \"userId\": data.userId\n                    }\n                },\n                { \n                    $lookup: {\n                        \"from\": \"users\",\n                        \"localField\": \"userId\",\n                        \"foreignField\": \"userId\",\n                        \"as\": \"Details\"\n                    }\n                },\n                {\n                    $unwind: \"$Details\"\n                },\n                {\n                    $project: {\n                        \"aliasId\":1,\n                        \"userId\":1,\n                        \"alias\":1,\n                        \"refferedUrl\":1,\n                        \"status\":1,\n                        \"created\":1,\n                        \"mailCount\":1,\n                        \"email\":\"$Details.email\"\n                    }\n                },\n                {\n                    $sort: {\n                        \"created\": -1\n                    }\n                }\n            ]).then(result => {\n                // console.log(\"Result is:========================== \\n\"+ (result)?JSON.stringify(result):\"0\"+\"\\n====================================================================\");  \n                resolve(result);\n                // console.log(val[0].user[0].email);\n            }).catch((err) => {\n                reject({ code: 500, msg: err });\n            });\n        })\n\n    }\n\n    getAlias(data) {\n        return new Promise((resolve, reject) => {\n            aliasModel.aggregate([\n                { \n                    $lookup: {\n                        \"from\": \"users\",\n                        \"localField\": \"userId\",\n                        \"foreignField\": \"userId\",\n                        \"as\": \"Details\"\n                    }\n                },\n                {\n                    $unwind: \"$Details\"\n                },\n                {\n                    $project: {\n                        \"aliasId\":1,\n                        \"userId\":1,\n                        \"alias\":1,\n                        \"refferedUrl\":1,\n                        \"status\":1,\n                        \"created\":1,\n                        \"mailCount\":1,\n                        \"email\":\"$Details.email\"\n                    }\n                },\n                {\n                    $sort: {\n                        \"created\": -1\n                    }\n                }\n            ]).then(result => {\n                // console.log(\"Result is:========================== \\n\"+ (result)?JSON.stringify(result):\"0\"+\"\\n====================================================================\");  \n                resolve(result);\n                // console.log(val[0].user[0].email);\n            }).catch((err) => {\n                reject({ code: 500, msg: err });\n            });\n        })\n\n    }\n\n    changeStatusOfAlias(data) {\n        return new Promise((resolve, reject) => {\n            // console.log(data.aliasId, data.status)\n                aliasModel.findOneAndUpdate({ aliasId: data.aliasId }, { status: data.status })\n                    .then((alias) => {\n                        // console.log(alias)\n                        resolve(null)\n                    }).catch((err) => {\n                        reject({ code: 500, msg: 'something went wrong' });\n                    })\n        })\n    }\n\n    deleteAlias(data) {\n        return new Promise((resolve, reject) => {\n            // console.log(data.body.userId, data.params.aliasId);\n            aliasModel.remove({ aliasId: data.params.aliasId })\n                .then((data) => {\n                    resolve(null)\n                })\n                .catch((err) => {\n                    reject({ code: 500, msg: 'something went wrong' })\n                })\n        })\n\n    }\n\n    //parsing domain name \n    getHostName = (url) => {\n        url = url.includes('http')?url:'http://'+url;\n        //console.log(url,\"url129\")\n        var match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\n        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {\n            return match[2];\n        }\n        else {\n            return null;\n        }\n    }\n\n    //end\n\n    // generating a random number \n\n    randomString = (string_length) => {\n        let chars = \"0123456789abcdefghiklmnopqrstuvwxyz\";\n        let randomstring = '';\n        for (let i = 0; i < string_length; i++) {\n            let rnum = Math.floor(Math.random() * chars.length);\n            randomstring += chars.substring(rnum, rnum + 1);\n        }\n        return randomstring;\n    }\n\n\n    getDomain = (url) => {\n        let hostName = this.getHostName(url);\n        let domain = hostName;\n\n        if (hostName != null) {\n            let parts = hostName.split('.').reverse();\n\n            if (parts != null && parts.length > 1) {\n                domain = parts[1] + '.' + parts[0];\n\n                if (hostName.toLowerCase().indexOf('.co.uk') != -1 && parts.length > 2) {\n                    domain = parts[2] + '.' + domain;\n                }\n            }\n        }\n\n        return domain.split('.')[0];\n    }\n\n    registerMailboxesOnServer(id){\n        console.log(id)\n        return new Promise((resolve, reject) => {\n            let url = `https://jinnmail.com/api/users/${id}`\n            let options = {\n                method: 'get',\n                json: true,\n                url: url\n            };\n            request(options, (err,res,body) => {\n                if (err) { console.log(err); }\n                console.log(\"Body\",body)\n                let link = `https://jinnmail.com/api/users/${id}/mailboxes`;\n                let opt = {\n                    method: 'get',\n                    json: true,\n                    url: link\n                };\n                request(opt, (error, result, content)=>{\n                    if(error) { console.log(error); }\n                    let mailboxes = content.results;\n                    let mailData = {};\n                    mailData.alias = body.address;\n                    mailData.wildduckId = id;\n                    mailboxes.map(m=>{\n                        if(m.name === \"INBOX\")\n                        {\n                            mailData.inboxId = m.id\n                        }\n                        if(m.name === \"Sent Mail\")\n                        {\n                            mailData.sentId = m.id\n                        }\n                    })\n                    console.log(mailData)\n                    let mail = new mailModel(mailData);\n                    mail.save((err, saved) => {\n                        if(err) { console.log(err); }\n                        else { console.log(\"saved\"); }\n                    })\n                })\n                \n                resolve(\"ok\")\n            })  \n        })\n    }\n\n    registerUserOnMailServer(data, username) {\n        return new Promise((resolve, reject) => {\n            //console.log(data)\n            userModel.findOne({ userId: data.userId }, { email: 1 }).then((userInfo) => {\n                let postData = {\n                    \"username\": username,\n                    \"password\": process.env.EMAIL_PASSWORD,\n                    \"targets\": [],\n                    \"disabledScopes\": []\n                }\n\n                let url = process.env.EMAIL_SERVER + 'users'\n                let options = {\n                    method: 'post',\n                    body: postData,\n                    json: true,\n                    url: url\n                };\n                request(options, function (err, res, body) {\n                    if (err) {\n                        console.error('error posting json: ', err)\n                        throw err\n                    }\n                    var headers = res.headers\n                    var statusCode = res.statusCode\n                    console.log('\\nHeaders: ', headers)\n                    console.log('\\nStatusCode: ', statusCode)\n                    console.log('\\nBody: ', body)\n                    /////////////////////////////////////////////////////////////////////////////////\n                    \n                    /////////////////////////////////////////////////////////////////////////////////\n\n                    resolve(body)\n                })\n            }).catch((err) => {\n                reject(err);\n            })\n\n        })\n    }\n\n    getAliasUser(data) {\n        return new Promise((resolve, reject) => {\n            let alias = data.query.alias;\n            // console.log(alias)\n            aliasModel.aggregate([\n                {\n                    $match: {\n                        alias: alias\n                    }\n                },\n                {\n                    $lookup: {\n                        from: 'users',\n                        localField: 'userId',\n                        foreignField: 'userId',\n                        as: 'userInfo'\n                    }\n                },\n                {\n                    $unwind: \"$userInfo\"\n                },\n                {\n                    $project:{\n                        email:'$userInfo.email',\n                        status:1\n                    }\n                }\n            ]).then((info) => {\n                resolve(info)\n            })\n        })\n\n    }\n        \n\n\n}\n\nexport default new AliasController();"]}