{"version":3,"sources":["../../src/middlewares/validator.js"],"names":["registerValidator","loginValidator","req","res","next","checkBody","notEmpty","isEmail","errorMessage","asyncValidationErrors","then","catch","errors","status","json","error","result"],"mappings":";;;;;QAAgBA,iB,GAAAA,iB;QA4BAC,c,GAAAA,c;AA5BT,SAASD,iBAAT,CAA2BE,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AAC9CF,QAAIG,SAAJ,CAAc;AACV,iBAAS;AACLC,sBAAU,IADL;AAELC,qBAAS;AACLC,8BAAc;AADT,aAFJ;AAKLA,0BAAc;AALT,SADC;AAQV,oBAAY;AACRF,sBAAU,IADF;AAERE,0BAAc;AAFN;AARF,KAAd;AAaAN,QAAIO,qBAAJ,GAA4BC,IAA5B,CAAiC,YAAM;AACnCN;AACH,KAFD,EAEGO,KAFH,CAES,kBAAU;AACf,YAAIC,MAAJ,EAAY;AACR,mBAAOT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,wBAAQ,GADgB;AAExBE,uBAAOH,MAFiB;AAGxBI,wBAAQ;AAHgB,aAArB,CAAP;AAKH;AACD;AACH,KAXD;AAYH;;AAEM,SAASf,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAwC;AAC3CF,QAAIG,SAAJ,CAAc;AACV,iBAAS;AACLC,sBAAU,IADL;AAELC,qBAAS;AACLC,8BAAc;AADT,aAFJ;AAKLA,0BAAc;AALT,SADC;;AASV,oBAAY;AACRF,sBAAU,IADF;AAERE,0BAAc;AAFN;AATF,KAAd;AAcAN,QAAIO,qBAAJ,GAA4BC,IAA5B,CAAiC,YAAM;AACnCN;AACH,KAFD,EAEGO,KAFH,CAES,kBAAU;AACf,YAAIC,MAAJ,EAAY;AACR,mBAAOT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,wBAAQ,GADgB;AAExBE,uBAAOH,MAFiB;AAGxBI,wBAAQ;AAHgB,aAArB,CAAP;AAKH;AACD;AACH,KAXD;AAYH","file":"validator.js","sourcesContent":["export function registerValidator(req, res, next) {\n    req.checkBody({\n        'email': {\n            notEmpty: true,\n            isEmail: {\n                errorMessage: 'Invalid Email Address'\n            },\n            errorMessage: 'Email is required'\n        },\n        'password': {\n            notEmpty: true,\n            errorMessage: 'Password is required'\n        }\n    });\n    req.asyncValidationErrors().then(() => {\n        next();\n    }).catch(errors => {\n        if (errors) {\n            return res.status(422).json({\n                status: 422,\n                error: errors,\n                result: \"\"\n            });\n        }\n        ;\n    });\n}\n\nexport function loginValidator(req, res, next) {\n    req.checkBody({\n        'email': {\n            notEmpty: true,\n            isEmail: {\n                errorMessage: 'Invalid Email Address'\n            },\n            errorMessage: 'Email is required'\n        },\n\n        'password': {\n            notEmpty: true,\n            errorMessage: 'Password is required'\n        }\n    });\n    req.asyncValidationErrors().then(() => {\n        next();\n    }).catch(errors => {\n        if (errors) {\n            return res.status(422).json({\n                status: 422,\n                error: errors,\n                result: \"\"\n            });\n        }\n        ;\n    });\n}"]}