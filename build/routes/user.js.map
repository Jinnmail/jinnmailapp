{"version":3,"sources":["../../src/routes/user.js"],"names":["validator","UserRoute","router","express","Router","routes","req","res","user","login","body","then","data","reqRes","responseHandler","end","catch","err","httpErrorHandler","register","userId","changePassword","post","registerValidator","loginValidator","userAuth","resetPassword"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,S;;;;;;;;IAGNC,S;AAGF,yBAAc;AAAA;;AACV,aAAKC,MAAL,GAAcC,kBAAQC,MAAR,EAAd;AACA,aAAKC,MAAL;AACH;;AAED;;;;;8BACMC,G,EAAKC,G,EAAK;AACZC,2BAAKC,KAAL,CAAWH,IAAII,IAAf,EACKC,IADL,CACU,UAACC,IAAD,EAAU;AACZC,iCAAOC,eAAP,CAAuB,kBAAvB,EAA2CF,IAA3C,EAAiDL,GAAjD;AACAA,oBAAIQ,GAAJ;AACH,aAJL,EAKKC,KALL,CAKW,UAACC,GAAD,EAAS;AACZJ,iCAAOK,gBAAP,CAAwBD,GAAxB,EAA6BV,GAA7B;AACAA,oBAAIQ,GAAJ;AACH,aARL;AASH;;;iCAEQT,G,EAAKC,G,EAAK;AACfC,2BAAKW,QAAL,CAAcb,IAAII,IAAlB,EACKC,IADL,CACU,UAACC,IAAD,EAAU;AACZC,iCAAOC,eAAP,CAAuB,oBAAvB,EAA6CF,IAA7C,EAAmDL,GAAnD;AACH,aAHL,EAGOS,KAHP,CAGa,UAACC,GAAD,EAAS;AACdJ,iCAAOK,gBAAP,CAAwBD,GAAxB,EAA6BV,GAA7B;AACAA,oBAAIQ,GAAJ;AACH,aANL;AAOH;;;sCAEaT,G,EAAKC,G,EAAK;AACpBD,gBAAII,IAAJ,CAASU,MAAT,GAAkBd,IAAIc,MAAtB;AACAZ,2BAAKa,cAAL,CAAoBf,IAAII,IAAxB,EACKC,IADL,CACU,UAACC,IAAD,EAAU;AACZC,iCAAOC,eAAP,CAAuB,kBAAvB,EAA2CF,IAA3C,EAAiDL,GAAjD;AACH,aAHL,EAGOS,KAHP,CAGa,UAACC,GAAD,EAAS;AACdJ,iCAAOK,gBAAP,CAAwBD,GAAxB,EAA6BV,GAA7B;AACAA,oBAAIQ,GAAJ;AACH,aANL;AAOH;;;iCAEQ;AACL,iBAAKb,MAAL,CAAYoB,IAAZ,CAAiB,GAAjB,EAAsBtB,UAAUuB,iBAAhC,EAAmD,KAAKJ,QAAxD;AACA,iBAAKjB,MAAL,CAAYoB,IAAZ,CAAiB,UAAjB,EAA6BtB,UAAUwB,cAAvC,EAAuD,KAAKf,KAA5D;AACA,iBAAKP,MAAL,CAAYoB,IAAZ,CAAiB,iBAAjB,EAAoCG,kBAApC,EAA8C,KAAKC,aAAnD;AACH;;;;;;kBAEU,IAAIzB,SAAJ,GAAgBC,M","file":"user.js","sourcesContent":["import express from 'express'\r\nimport userAuth from '../middlewares/userAuth'\r\nimport reqRes from '../middlewares/reqRes'\r\nimport user from '../controller/user';\r\nimport * as validator from '../middlewares/validator'\r\n\r\n\r\nclass UserRoute {\r\n    router\r\n\r\n    constructor() {\r\n        this.router = express.Router()\r\n        this.routes()\r\n    }\r\n\r\n    //writing routes here\r\n    login(req, res) {\r\n        user.login(req.body)\r\n            .then((data) => {\r\n                reqRes.responseHandler('Login Successful', data, res);\r\n                res.end();\r\n            })\r\n            .catch((err) => {\r\n                reqRes.httpErrorHandler(err, res)\r\n                res.end()\r\n            })\r\n    }\r\n\r\n    register(req, res) {\r\n        user.register(req.body)\r\n            .then((data) => {\r\n                reqRes.responseHandler('signup Successfull', data, res);\r\n            }).catch((err) => {\r\n                reqRes.httpErrorHandler(err, res)\r\n                res.end()\r\n            })\r\n    }\r\n\r\n    resetPassword(req, res) {\r\n        req.body.userId = req.userId;\r\n        user.changePassword(req.body)\r\n            .then((data) => {\r\n                reqRes.responseHandler('password changed', data, res);\r\n            }).catch((err) => {\r\n                reqRes.httpErrorHandler(err, res)\r\n                res.end()\r\n            })\r\n    }\r\n\r\n    routes() {\r\n        this.router.post('/', validator.registerValidator, this.register);\r\n        this.router.post('/session', validator.loginValidator, this.login);\r\n        this.router.post('/reset/password', userAuth, this.resetPassword);\r\n    }\r\n}\r\nexport default new UserRoute().router"]}