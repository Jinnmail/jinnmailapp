{"version":3,"sources":["../../src/routes/user.js"],"names":["validator","UserRoute","router","express","Router","routes","req","res","user","login","body","then","data","reqRes","responseHandler","end","catch","err","httpErrorHandler","register","userId","changePassword","codeVerification","resendCode","forgetPassword","resetPasswordChange","getUsers","status","send","console","log","sg_wh_api_string","query","sendgrid_webhook_api_string","process","env","SENDGRID_WEBHOOK_API_STRING","post","registerValidator","loginValidator","userAuth","resetPassword","inbound","get","getRegisteredUsers"],"mappings":"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","file":"user.js","sourcesContent":["import express from 'express'\nimport userAuth from '../middlewares/userAuth'\nimport reqRes from '../middlewares/reqRes'\nimport user from '../controller/user';\nimport * as validator from '../middlewares/validator'\n\nclass UserRoute {\n    router\n\n    constructor() {\n        this.router = express.Router()\n        this.routes()\n    }\n\n    //writing routes here\n    login(req, res) {\n        user.login(req.body)\n            .then((data) => {\n                reqRes.responseHandler('Login Successful', data, res);\n                res.end();\n            })\n            .catch((err) => {\n                reqRes.httpErrorHandler(err, res)\n                res.end()\n            })\n    }\n\n    register(req, res) {\n        user.register(req.body)\n            .then((data) => {\n                reqRes.responseHandler('signup Successfull', data, res);\n            }).catch((err) => {\n                reqRes.httpErrorHandler(err, res)\n                res.end()\n            })\n    }\n\n    resetPassword(req, res) {\n        req.body.userId = req.userId;\n        user.changePassword(req.body)\n            .then((data) => {\n                reqRes.responseHandler('password changed', data, res);\n            }).catch((err) => {\n                reqRes.httpErrorHandler(err, res)\n                res.end()\n            })\n    }\n\n    codeVerification(req,res){\n        \n        user.codeVerification(req.body)\n            .then((data) => {\n                reqRes.responseHandler('', data, res); //Handle Response\n            }).catch((err) => {\n                reqRes.httpErrorHandler(err, res)\n                res.end()\n            })\n    }\n\n    resendCode(req, res){\n        user.resendCode(req.body)\n            .then((data) => {\n                reqRes.responseHandler('', data, res); //Handle Response\n            }).catch((err) => {\n                reqRes.httpErrorHandler(err, res)\n                res.end()\n            })\n    }\n\n    forgetPassword(req,res){\n         \n        user.forgetPassword(req.body)\n            .then((data) => {\n                reqRes.responseHandler('', data, res); //Handle Response\n            }).catch((err) => {\n                reqRes.httpErrorHandler(err, res)\n                res.end()\n            })\n    }\n\n    resetPasswordChange(req,res){\n        user.resetPasswordChange(req.body)\n            .then( data => {\n                reqRes.responseHandler('',data, res);\n            })\n            .catch( err => {\n                reqRes.httpErrorHandler(err, res);\n                res.end();\n            });\n    }\n\n    getRegisteredUsers(req, res) {\n        user.getUsers(req)\n            .then((data) => {\n                // reqRes.responseHandler('fetched successfully', data, res);\n                res.status(200).send(data)\n            }).catch((err) => {\n                reqRes.httpErrorHandler(err, res);\n                res.end();\n            })\n    }\n\n    inbound(req, res) {\n        console.log(\"***************************************\")\n        console.log(\"******** INBOUND WEBHOOK FIRED ********\")\n        console.log(\"***************************************\")\n        let sg_wh_api_string = req.query.sendgrid_webhook_api_string;\n        console.log(sg_wh_api_string)\n        if (sg_wh_api_string === process.env.SENDGRID_WEBHOOK_API_STRING) {\n            console.log(\"********MATCHED********\")\n        }\n    }\n\n    routes() {\n        this.router.post('/', validator.registerValidator, this.register);\n        this.router.post('/session', validator.loginValidator, this.login);\n        this.router.post('/reset/password', userAuth, this.resetPassword);\n        this.router.post('/code/verify', this.codeVerification);\n        this.router.post('/code/resend', this.resendCode);\n        this.router.post('/forgot/password', this.forgetPassword);\n        this.router.post('/forgot/password/reset', this.resetPasswordChange);\n        this.router.post('/inbound', this.inbound);\n\n        this.router.get('/', userAuth, this.getRegisteredUsers);\n    }\n}\nexport default new UserRoute().router"]}