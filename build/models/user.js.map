{"version":3,"sources":["../../src/models/user.js"],"names":["SALT_WORK_FACTOR","userSchema","mongoose","Schema","userId","type","String","required","email","unique","lowercase","password","validate","v","length","verificationCode","verified","Boolean","default","resetPasswordToken","resetPasswordExpires","Date","created","now","aliasesCount","Number","pre","next","user","isModified","bcrypt","genSalt","err","salt","hash","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAIA,mBAAmB,EAAvB;;AAEA,IAAMC,aAAaC,aAASC,MAAT,CAAgB;AAC/BC,YAAQ;AACJC,cAAMC,MADF;AAEJC,kBAAU;AAFN,KADuB;AAK/BC,WAAO;AACHH,cAAMC,MADH;AAEHG,gBAAQ,IAFL;AAGHC,mBAAW,IAHR;AAIHH,kBAAW,CAAC,IAAD,EAAO,yBAAP;AAJR,KALwB;AAW/BI,cAAU;AACNN,cAAMC,MADA;AAENC,kBAAU,CAAC,IAAD,EAAO,4BAAP,CAFJ;AAGNK,kBAAU,CAAC,UAAUC,CAAV,EAAa;AACpB,mBAAOA,EAAEC,MAAF,IAAY,CAAnB;AACH,SAFS,EAEP,gCAFO;AAHJ,KAXqB;AAkB/BC,sBAAkB;AACdV,cAAMC;;AADQ,KAlBa;AAsB/BU,cAAW;AACPX,cAAMY,OADC;AAEPC,iBAAQ;AAFD,KAtBoB;AA0B/BC,wBAAmB;AACfd,cAAMC,MADS;AAEfY,iBAAQ;AAFO,KA1BY;AA8B/BE,0BAAqB;AACjBf,cAAMgB;AADW,KA9BU;AAiC/BC,aAAS;AACLjB,cAAMgB,IADD;AAELH,iBAASG,KAAKE;AAFT,KAjCsB;AAqC/BC,kBAAc;AACVnB,cAAMoB,MADI;AAEVP,iBAAS;AAFC;AArCiB,CAAhB,CAAnB;AA0CA;;;;AAIAjB,WAAWyB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAMC,OAAO,IAAb;AACA,QAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EACI,OAAOF,MAAP;;AAEJG,2BAAOC,OAAP,CAAe/B,gBAAf,EAAiC,UAACgC,GAAD,EAAMC,IAAN,EAAe;AAC5C,YAAID,GAAJ,EACI,OAAOL,KAAKK,GAAL,CAAP;AACJF,+BAAOI,IAAP,CAAYN,KAAKjB,QAAjB,EAA2BsB,IAA3B,EAAiC,IAAjC,EAAuC,UAACD,GAAD,EAAME,IAAN,EAAe;AAClD,gBAAIF,GAAJ,EACI,OAAOL,KAAKK,GAAL,CAAP;;AAEJJ,iBAAKjB,QAAL,GAAgBuB,IAAhB;AACAP;AACH,SAND;AAOH,KAVD;AAWH,CAhBD;;AAkBA,IAAMC,OAAO1B,aAASiC,KAAT,CAAe,MAAf,EAAuBlC,UAAvB,CAAb;;kBAEe2B,I","file":"user.js","sourcesContent":["import mongoose from '../db/db'\nimport bcrypt from 'bcrypt-nodejs';\n\nlet SALT_WORK_FACTOR = 10;\n\nconst userSchema = mongoose.Schema({\n    userId: {\n        type: String,\n        required: true\n    },\n    email: {\n        type: String,\n        unique: true,\n        lowercase: true,\n        required:  [true, 'email field is Required']\n    },\n    password: {\n        type: String,\n        required: [true, 'password field is Required'],\n        validate: [function (v) {\n            return v.length >= 8;\n        }, 'Password min length is 8 chars']\n    },\n    verificationCode: {\n        type: String\n        \n    },\n    verified : {\n        type: Boolean,\n        default:false\n    },\n    resetPasswordToken:{\n        type: String,\n        default:null\n    },\n    resetPasswordExpires:{\n        type: Date\n    },\n    created: {\n        type: Date,\n        default: Date.now\n    },\n    aliasesCount: {\n        type: Number,\n        default: 0\n    }\n});\n/*\n * Encrypt the password before saving it to DB\n */\n\nuserSchema.pre('save', function (next) {\n    const user = this;\n    if (!user.isModified('password'))\n        return next();\n\n    bcrypt.genSalt(SALT_WORK_FACTOR, (err, salt) => {\n        if (err)\n            return next(err);\n        bcrypt.hash(user.password, salt, null, (err, hash) => {\n            if (err)\n                return next(err);\n\n            user.password = hash;\n            next();\n        });\n    });\n});\n\nconst user = mongoose.model('user', userSchema);\n\nexport default user;\n\n"]}