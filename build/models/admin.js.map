{"version":3,"sources":["../../src/models/admin.js"],"names":["mongoose","require","bcrypt","SALT_WORK_FACTOR","adminSchema","Schema","adminId","type","String","required","username","unique","lowercase","password","validate","v","length","resetPasswordToken","default","resetPasswordExpires","Date","created","now","pre","next","admin","isModified","genSalt","err","salt","hash","model","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,eAAR,CAAf;;AAEA,IAAIE,mBAAmB,EAAvB;;AAEA,IAAMC,cAAcJ,SAASK,MAAT,CAAgB;AAChCC,aAAS;AACLC,cAAMC,MADD;AAELC,kBAAU;AAFL,KADuB;AAKhCC,cAAU;AACNH,cAAMC,MADA;AAENG,gBAAQ,IAFF;AAGNC,mBAAW,IAHL;AAINH,kBAAW,CAAC,IAAD,EAAO,4BAAP;AAJL,KALsB;AAWhCI,cAAU;AACNN,cAAMC,MADA;AAENC,kBAAU,CAAC,IAAD,EAAO,4BAAP,CAFJ;AAGNK,kBAAU,CAAC,UAAUC,CAAV,EAAa;AACpB,mBAAOA,EAAEC,MAAF,IAAY,CAAnB;AACH,SAFS,EAEP,gCAFO;AAHJ,KAXsB;AAkBhCC,wBAAmB;AACfV,cAAMC,MADS;AAEfU,iBAAQ;AAFO,KAlBa;AAsBhCC,0BAAqB;AACjBZ,cAAMa;AADW,KAtBW;AAyBhCC,aAAS;AACLd,cAAMa,IADD;AAELF,iBAASE,KAAKE;AAFT;AAzBuB,CAAhB,CAApB;AA8BA;;;;AAIAlB,YAAYmB,GAAZ,CAAgB,MAAhB,EAAwB,UAAUC,IAAV,EAAgB;AACpC,QAAMC,QAAQ,IAAd;AACA,QAAI,CAACA,MAAMC,UAAN,CAAiB,UAAjB,CAAL,EACI,OAAOF,MAAP;;AAEJtB,WAAOyB,OAAP,CAAexB,gBAAf,EAAiC,UAACyB,GAAD,EAAMC,IAAN,EAAe;AAC5C,YAAID,GAAJ,EACI,OAAOJ,KAAKI,GAAL,CAAP;AACJ1B,eAAO4B,IAAP,CAAYL,MAAMZ,QAAlB,EAA4BgB,IAA5B,EAAkC,IAAlC,EAAwC,UAACD,GAAD,EAAME,IAAN,EAAe;AACnD,gBAAIF,GAAJ,EACI,OAAOJ,KAAKI,GAAL,CAAP;;AAEJH,kBAAMZ,QAAN,GAAiBiB,IAAjB;AACAN;AACH,SAND;AAOH,KAVD;AAWH,CAhBD;;AAkBA,IAAMC,QAAQzB,SAAS+B,KAAT,CAAe,OAAf,EAAwB3B,WAAxB,CAAd;;AAEA4B,OAAOC,OAAP,GAAiBR,KAAjB","file":"admin.js","sourcesContent":["const mongoose = require('../db/db');\nconst bcrypt = require('bcrypt-nodejs');\n\nlet SALT_WORK_FACTOR = 10;\n\nconst adminSchema = mongoose.Schema({\n    adminId: {\n        type: String,\n        required: true\n    },\n    username: {\n        type: String,\n        unique: true,\n        lowercase: true,\n        required:  [true, 'username field is Required']\n    },\n    password: {\n        type: String,\n        required: [true, 'password field is Required'],\n        validate: [function (v) {\n            return v.length >= 8;\n        }, 'Password min length is 8 chars']\n    },\n    resetPasswordToken:{\n        type: String,\n        default:null\n    },\n    resetPasswordExpires:{\n        type: Date\n    },\n    created: {\n        type: Date,\n        default: Date.now\n    }\n});\n/*\n * Encrypt the password before saving it to DB\n */\n\nadminSchema.pre('save', function (next) {\n    const admin = this;\n    if (!admin.isModified('password'))\n        return next();\n\n    bcrypt.genSalt(SALT_WORK_FACTOR, (err, salt) => {\n        if (err)\n            return next(err);\n        bcrypt.hash(admin.password, salt, null, (err, hash) => {\n            if (err)\n                return next(err);\n\n            admin.password = hash;\n            next();\n        });\n    });\n});\n\nconst admin = mongoose.model('admin', adminSchema);\n\nmodule.exports = admin;\n\n"]}