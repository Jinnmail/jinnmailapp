{"version":3,"sources":["../../src/models/admin.js"],"names":["mongoose","require","bcrypt","SALT_WORK_FACTOR","adminSchema","Schema","adminId","type","String","required","username","unique","lowercase","password","validate","v","length","resetPasswordToken","default","resetPasswordExpires","Date","created","now","pre","next","admin","isModified","genSalt","err","salt","hash","model","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,eAAR,CAAf;;AAEA,IAAIE,mBAAmB,EAAvB;;AAEA,IAAMC,cAAcJ,SAASK,MAAT,CAAgB;AAChCC,aAAS;AACLC,cAAMC,MADD;AAELC,kBAAU;AAFL,KADuB;AAKhCC,cAAU;AACNH,cAAMC,MADA;AAENG,gBAAQ,IAFF;AAGNC,mBAAW,IAHL;AAINH,kBAAW,CAAC,IAAD,EAAO,4BAAP;AAJL,KALsB;AAWhCI,cAAU;AACNN,cAAMC,MADA;AAENC,kBAAU,CAAC,IAAD,EAAO,4BAAP,CAFJ;AAGNK,kBAAU,CAAC,UAAUC,CAAV,EAAa;AACpB,mBAAOA,EAAEC,MAAF,IAAY,CAAnB;AACH,SAFS,EAEP,gCAFO;AAHJ,KAXsB;AAkBhCC,wBAAmB;AACfV,cAAMC,MADS;AAEfU,iBAAQ;AAFO,KAlBa;AAsBhCC,0BAAqB;AACjBZ,cAAMa;AADW,KAtBW;AAyBhCC,aAAS;AACLd,cAAMa,IADD;AAELF,iBAASE,KAAKE;AAFT;AAzBuB,CAAhB,CAApB;AA8BA;;;;AAIAlB,YAAYmB,GAAZ,CAAgB,MAAhB,EAAwB,UAAUC,IAAV,EAAgB;AACpC,QAAMC,QAAQ,IAAd;AACA,QAAI,CAACA,MAAMC,UAAN,CAAiB,UAAjB,CAAL,EACI,OAAOF,MAAP;;AAEJtB,WAAOyB,OAAP,CAAexB,gBAAf,EAAiC,UAACyB,GAAD,EAAMC,IAAN,EAAe;AAC5C,YAAID,GAAJ,EACI,OAAOJ,KAAKI,GAAL,CAAP;AACJ1B,eAAO4B,IAAP,CAAYL,MAAMZ,QAAlB,EAA4BgB,IAA5B,EAAkC,IAAlC,EAAwC,UAACD,GAAD,EAAME,IAAN,EAAe;AACnD,gBAAIF,GAAJ,EACI,OAAOJ,KAAKI,GAAL,CAAP;;AAEJH,kBAAMZ,QAAN,GAAiBiB,IAAjB;AACAN;AACH,SAND;AAOH,KAVD;AAWH,CAhBD;;AAkBA,IAAMC,QAAQzB,SAAS+B,KAAT,CAAe,OAAf,EAAwB3B,WAAxB,CAAd;;AAEA4B,OAAOC,OAAP,GAAiBR,KAAjB","file":"admin.js","sourcesContent":["const mongoose = require('../db/db');\r\nconst bcrypt = require('bcrypt-nodejs');\r\n\r\nlet SALT_WORK_FACTOR = 10;\r\n\r\nconst adminSchema = mongoose.Schema({\r\n    adminId: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    username: {\r\n        type: String,\r\n        unique: true,\r\n        lowercase: true,\r\n        required:  [true, 'username field is Required']\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: [true, 'password field is Required'],\r\n        validate: [function (v) {\r\n            return v.length >= 8;\r\n        }, 'Password min length is 8 chars']\r\n    },\r\n    resetPasswordToken:{\r\n        type: String,\r\n        default:null\r\n    },\r\n    resetPasswordExpires:{\r\n        type: Date\r\n    },\r\n    created: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\n/*\r\n * Encrypt the password before saving it to DB\r\n */\r\n\r\nadminSchema.pre('save', function (next) {\r\n    const admin = this;\r\n    if (!admin.isModified('password'))\r\n        return next();\r\n\r\n    bcrypt.genSalt(SALT_WORK_FACTOR, (err, salt) => {\r\n        if (err)\r\n            return next(err);\r\n        bcrypt.hash(admin.password, salt, null, (err, hash) => {\r\n            if (err)\r\n                return next(err);\r\n\r\n            admin.password = hash;\r\n            next();\r\n        });\r\n    });\r\n});\r\n\r\nconst admin = mongoose.model('admin', adminSchema);\r\n\r\nmodule.exports = admin;\r\n\r\n"]}